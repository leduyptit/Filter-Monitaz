/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-6")
public class FilterMonitazService {

  public interface Iface {

    public boolean update(String object, String services, short point, short pernegative, short perpositive, short perneutral, String idstr, short type, short mentiontype, short tag, int own, short concernpoint) throws org.apache.thrift.TException;

    public List<MessageInfo> getPosts(int limit, String query) throws org.apache.thrift.TException;

    public boolean updateEs(String id, String column) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void update(String object, String services, short point, short pernegative, short perpositive, short perneutral, String idstr, short type, short mentiontype, short tag, int own, short concernpoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPosts(int limit, String query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEs(String id, String column, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean update(String object, String services, short point, short pernegative, short perpositive, short perneutral, String idstr, short type, short mentiontype, short tag, int own, short concernpoint) throws org.apache.thrift.TException
    {
      send_update(object, services, point, pernegative, perpositive, perneutral, idstr, type, mentiontype, tag, own, concernpoint);
      return recv_update();
    }

    public void send_update(String object, String services, short point, short pernegative, short perpositive, short perneutral, String idstr, short type, short mentiontype, short tag, int own, short concernpoint) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setObject(object);
      args.setServices(services);
      args.setPoint(point);
      args.setPernegative(pernegative);
      args.setPerpositive(perpositive);
      args.setPerneutral(perneutral);
      args.setIdstr(idstr);
      args.setType(type);
      args.setMentiontype(mentiontype);
      args.setTag(tag);
      args.setOwn(own);
      args.setConcernpoint(concernpoint);
      sendBase("update", args);
    }

    public boolean recv_update() throws org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

    public List<MessageInfo> getPosts(int limit, String query) throws org.apache.thrift.TException
    {
      send_getPosts(limit, query);
      return recv_getPosts();
    }

    public void send_getPosts(int limit, String query) throws org.apache.thrift.TException
    {
      getPosts_args args = new getPosts_args();
      args.setLimit(limit);
      args.setQuery(query);
      sendBase("getPosts", args);
    }

    public List<MessageInfo> recv_getPosts() throws org.apache.thrift.TException
    {
      getPosts_result result = new getPosts_result();
      receiveBase(result, "getPosts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPosts failed: unknown result");
    }

    public boolean updateEs(String id, String column) throws org.apache.thrift.TException
    {
      send_updateEs(id, column);
      return recv_updateEs();
    }

    public void send_updateEs(String id, String column) throws org.apache.thrift.TException
    {
      updateEs_args args = new updateEs_args();
      args.setId(id);
      args.setColumn(column);
      sendBase("updateEs", args);
    }

    public boolean recv_updateEs() throws org.apache.thrift.TException
    {
      updateEs_result result = new updateEs_result();
      receiveBase(result, "updateEs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void update(String object, String services, short point, short pernegative, short perpositive, short perneutral, String idstr, short type, short mentiontype, short tag, int own, short concernpoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_call method_call = new update_call(object, services, point, pernegative, perpositive, perneutral, idstr, type, mentiontype, tag, own, concernpoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String object;
      private String services;
      private short point;
      private short pernegative;
      private short perpositive;
      private short perneutral;
      private String idstr;
      private short type;
      private short mentiontype;
      private short tag;
      private int own;
      private short concernpoint;
      public update_call(String object, String services, short point, short pernegative, short perpositive, short perneutral, String idstr, short type, short mentiontype, short tag, int own, short concernpoint, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.object = object;
        this.services = services;
        this.point = point;
        this.pernegative = pernegative;
        this.perpositive = perpositive;
        this.perneutral = perneutral;
        this.idstr = idstr;
        this.type = type;
        this.mentiontype = mentiontype;
        this.tag = tag;
        this.own = own;
        this.concernpoint = concernpoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_args args = new update_args();
        args.setObject(object);
        args.setServices(services);
        args.setPoint(point);
        args.setPernegative(pernegative);
        args.setPerpositive(perpositive);
        args.setPerneutral(perneutral);
        args.setIdstr(idstr);
        args.setType(type);
        args.setMentiontype(mentiontype);
        args.setTag(tag);
        args.setOwn(own);
        args.setConcernpoint(concernpoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update();
      }
    }

    public void getPosts(int limit, String query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPosts_call method_call = new getPosts_call(limit, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int limit;
      private String query;
      public getPosts_call(int limit, String query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.limit = limit;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPosts_args args = new getPosts_args();
        args.setLimit(limit);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MessageInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPosts();
      }
    }

    public void updateEs(String id, String column, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEs_call method_call = new updateEs_call(id, column, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String column;
      public updateEs_call(String id, String column, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.column = column;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEs_args args = new updateEs_args();
        args.setId(id);
        args.setColumn(column);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("update", new update());
      processMap.put("getPosts", new getPosts());
      processMap.put("updateEs", new updateEs());
      return processMap;
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        result.success = iface.update(args.object, args.services, args.point, args.pernegative, args.perpositive, args.perneutral, args.idstr, args.type, args.mentiontype, args.tag, args.own, args.concernpoint);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPosts_args> {
      public getPosts() {
        super("getPosts");
      }

      public getPosts_args getEmptyArgsInstance() {
        return new getPosts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPosts_result getResult(I iface, getPosts_args args) throws org.apache.thrift.TException {
        getPosts_result result = new getPosts_result();
        result.success = iface.getPosts(args.limit, args.query);
        return result;
      }
    }

    public static class updateEs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEs_args> {
      public updateEs() {
        super("updateEs");
      }

      public updateEs_args getEmptyArgsInstance() {
        return new updateEs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEs_result getResult(I iface, updateEs_args args) throws org.apache.thrift.TException {
        updateEs_result result = new updateEs_result();
        result.success = iface.updateEs(args.id, args.column);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("update", new update());
      processMap.put("getPosts", new getPosts());
      processMap.put("updateEs", new updateEs());
      return processMap;
    }

    public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, Boolean> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            update_result result = new update_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_result result = new update_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.update(args.object, args.services, args.point, args.pernegative, args.perpositive, args.perneutral, args.idstr, args.type, args.mentiontype, args.tag, args.own, args.concernpoint,resultHandler);
      }
    }

    public static class getPosts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPosts_args, List<MessageInfo>> {
      public getPosts() {
        super("getPosts");
      }

      public getPosts_args getEmptyArgsInstance() {
        return new getPosts_args();
      }

      public AsyncMethodCallback<List<MessageInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MessageInfo>>() { 
          public void onComplete(List<MessageInfo> o) {
            getPosts_result result = new getPosts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPosts_result result = new getPosts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPosts_args args, org.apache.thrift.async.AsyncMethodCallback<List<MessageInfo>> resultHandler) throws TException {
        iface.getPosts(args.limit, args.query,resultHandler);
      }
    }

    public static class updateEs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEs_args, Boolean> {
      public updateEs() {
        super("updateEs");
      }

      public updateEs_args getEmptyArgsInstance() {
        return new updateEs_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateEs_result result = new updateEs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEs_result result = new updateEs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEs_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateEs(args.id, args.column,resultHandler);
      }
    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("services", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField PERNEGATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("pernegative", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField PERPOSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("perpositive", org.apache.thrift.protocol.TType.I16, (short)5);
    private static final org.apache.thrift.protocol.TField PERNEUTRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("perneutral", org.apache.thrift.protocol.TType.I16, (short)6);
    private static final org.apache.thrift.protocol.TField IDSTR_FIELD_DESC = new org.apache.thrift.protocol.TField("idstr", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I16, (short)8);
    private static final org.apache.thrift.protocol.TField MENTIONTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mentiontype", org.apache.thrift.protocol.TType.I16, (short)9);
    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.I16, (short)10);
    private static final org.apache.thrift.protocol.TField OWN_FIELD_DESC = new org.apache.thrift.protocol.TField("own", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField CONCERNPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("concernpoint", org.apache.thrift.protocol.TType.I16, (short)12);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
    }

    public String object; // required
    public String services; // required
    public short point; // required
    public short pernegative; // required
    public short perpositive; // required
    public short perneutral; // required
    public String idstr; // required
    public short type; // required
    public short mentiontype; // required
    public short tag; // required
    public int own; // required
    public short concernpoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT((short)1, "object"),
      SERVICES((short)2, "services"),
      POINT((short)3, "point"),
      PERNEGATIVE((short)4, "pernegative"),
      PERPOSITIVE((short)5, "perpositive"),
      PERNEUTRAL((short)6, "perneutral"),
      IDSTR((short)7, "idstr"),
      TYPE((short)8, "type"),
      MENTIONTYPE((short)9, "mentiontype"),
      TAG((short)10, "tag"),
      OWN((short)11, "own"),
      CONCERNPOINT((short)12, "concernpoint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT
            return OBJECT;
          case 2: // SERVICES
            return SERVICES;
          case 3: // POINT
            return POINT;
          case 4: // PERNEGATIVE
            return PERNEGATIVE;
          case 5: // PERPOSITIVE
            return PERPOSITIVE;
          case 6: // PERNEUTRAL
            return PERNEUTRAL;
          case 7: // IDSTR
            return IDSTR;
          case 8: // TYPE
            return TYPE;
          case 9: // MENTIONTYPE
            return MENTIONTYPE;
          case 10: // TAG
            return TAG;
          case 11: // OWN
            return OWN;
          case 12: // CONCERNPOINT
            return CONCERNPOINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POINT_ISSET_ID = 0;
    private static final int __PERNEGATIVE_ISSET_ID = 1;
    private static final int __PERPOSITIVE_ISSET_ID = 2;
    private static final int __PERNEUTRAL_ISSET_ID = 3;
    private static final int __TYPE_ISSET_ID = 4;
    private static final int __MENTIONTYPE_ISSET_ID = 5;
    private static final int __TAG_ISSET_ID = 6;
    private static final int __OWN_ISSET_ID = 7;
    private static final int __CONCERNPOINT_ISSET_ID = 8;
    private short __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICES, new org.apache.thrift.meta_data.FieldMetaData("services", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PERNEGATIVE, new org.apache.thrift.meta_data.FieldMetaData("pernegative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PERPOSITIVE, new org.apache.thrift.meta_data.FieldMetaData("perpositive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PERNEUTRAL, new org.apache.thrift.meta_data.FieldMetaData("perneutral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.IDSTR, new org.apache.thrift.meta_data.FieldMetaData("idstr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.MENTIONTYPE, new org.apache.thrift.meta_data.FieldMetaData("mentiontype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.OWN, new org.apache.thrift.meta_data.FieldMetaData("own", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONCERNPOINT, new org.apache.thrift.meta_data.FieldMetaData("concernpoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String object,
      String services,
      short point,
      short pernegative,
      short perpositive,
      short perneutral,
      String idstr,
      short type,
      short mentiontype,
      short tag,
      int own,
      short concernpoint)
    {
      this();
      this.object = object;
      this.services = services;
      this.point = point;
      setPointIsSet(true);
      this.pernegative = pernegative;
      setPernegativeIsSet(true);
      this.perpositive = perpositive;
      setPerpositiveIsSet(true);
      this.perneutral = perneutral;
      setPerneutralIsSet(true);
      this.idstr = idstr;
      this.type = type;
      setTypeIsSet(true);
      this.mentiontype = mentiontype;
      setMentiontypeIsSet(true);
      this.tag = tag;
      setTagIsSet(true);
      this.own = own;
      setOwnIsSet(true);
      this.concernpoint = concernpoint;
      setConcernpointIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObject()) {
        this.object = other.object;
      }
      if (other.isSetServices()) {
        this.services = other.services;
      }
      this.point = other.point;
      this.pernegative = other.pernegative;
      this.perpositive = other.perpositive;
      this.perneutral = other.perneutral;
      if (other.isSetIdstr()) {
        this.idstr = other.idstr;
      }
      this.type = other.type;
      this.mentiontype = other.mentiontype;
      this.tag = other.tag;
      this.own = other.own;
      this.concernpoint = other.concernpoint;
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.object = null;
      this.services = null;
      setPointIsSet(false);
      this.point = 0;
      setPernegativeIsSet(false);
      this.pernegative = 0;
      setPerpositiveIsSet(false);
      this.perpositive = 0;
      setPerneutralIsSet(false);
      this.perneutral = 0;
      this.idstr = null;
      setTypeIsSet(false);
      this.type = 0;
      setMentiontypeIsSet(false);
      this.mentiontype = 0;
      setTagIsSet(false);
      this.tag = 0;
      setOwnIsSet(false);
      this.own = 0;
      setConcernpointIsSet(false);
      this.concernpoint = 0;
    }

    public String getObject() {
      return this.object;
    }

    public update_args setObject(String object) {
      this.object = object;
      return this;
    }

    public void unsetObject() {
      this.object = null;
    }

    /** Returns true if field object is set (has been assigned a value) and false otherwise */
    public boolean isSetObject() {
      return this.object != null;
    }

    public void setObjectIsSet(boolean value) {
      if (!value) {
        this.object = null;
      }
    }

    public String getServices() {
      return this.services;
    }

    public update_args setServices(String services) {
      this.services = services;
      return this;
    }

    public void unsetServices() {
      this.services = null;
    }

    /** Returns true if field services is set (has been assigned a value) and false otherwise */
    public boolean isSetServices() {
      return this.services != null;
    }

    public void setServicesIsSet(boolean value) {
      if (!value) {
        this.services = null;
      }
    }

    public short getPoint() {
      return this.point;
    }

    public update_args setPoint(short point) {
      this.point = point;
      setPointIsSet(true);
      return this;
    }

    public void unsetPoint() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
    }

    /** Returns true if field point is set (has been assigned a value) and false otherwise */
    public boolean isSetPoint() {
      return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
    }

    public void setPointIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
    }

    public short getPernegative() {
      return this.pernegative;
    }

    public update_args setPernegative(short pernegative) {
      this.pernegative = pernegative;
      setPernegativeIsSet(true);
      return this;
    }

    public void unsetPernegative() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERNEGATIVE_ISSET_ID);
    }

    /** Returns true if field pernegative is set (has been assigned a value) and false otherwise */
    public boolean isSetPernegative() {
      return EncodingUtils.testBit(__isset_bitfield, __PERNEGATIVE_ISSET_ID);
    }

    public void setPernegativeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERNEGATIVE_ISSET_ID, value);
    }

    public short getPerpositive() {
      return this.perpositive;
    }

    public update_args setPerpositive(short perpositive) {
      this.perpositive = perpositive;
      setPerpositiveIsSet(true);
      return this;
    }

    public void unsetPerpositive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERPOSITIVE_ISSET_ID);
    }

    /** Returns true if field perpositive is set (has been assigned a value) and false otherwise */
    public boolean isSetPerpositive() {
      return EncodingUtils.testBit(__isset_bitfield, __PERPOSITIVE_ISSET_ID);
    }

    public void setPerpositiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERPOSITIVE_ISSET_ID, value);
    }

    public short getPerneutral() {
      return this.perneutral;
    }

    public update_args setPerneutral(short perneutral) {
      this.perneutral = perneutral;
      setPerneutralIsSet(true);
      return this;
    }

    public void unsetPerneutral() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERNEUTRAL_ISSET_ID);
    }

    /** Returns true if field perneutral is set (has been assigned a value) and false otherwise */
    public boolean isSetPerneutral() {
      return EncodingUtils.testBit(__isset_bitfield, __PERNEUTRAL_ISSET_ID);
    }

    public void setPerneutralIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERNEUTRAL_ISSET_ID, value);
    }

    public String getIdstr() {
      return this.idstr;
    }

    public update_args setIdstr(String idstr) {
      this.idstr = idstr;
      return this;
    }

    public void unsetIdstr() {
      this.idstr = null;
    }

    /** Returns true if field idstr is set (has been assigned a value) and false otherwise */
    public boolean isSetIdstr() {
      return this.idstr != null;
    }

    public void setIdstrIsSet(boolean value) {
      if (!value) {
        this.idstr = null;
      }
    }

    public short getType() {
      return this.type;
    }

    public update_args setType(short type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public short getMentiontype() {
      return this.mentiontype;
    }

    public update_args setMentiontype(short mentiontype) {
      this.mentiontype = mentiontype;
      setMentiontypeIsSet(true);
      return this;
    }

    public void unsetMentiontype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENTIONTYPE_ISSET_ID);
    }

    /** Returns true if field mentiontype is set (has been assigned a value) and false otherwise */
    public boolean isSetMentiontype() {
      return EncodingUtils.testBit(__isset_bitfield, __MENTIONTYPE_ISSET_ID);
    }

    public void setMentiontypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENTIONTYPE_ISSET_ID, value);
    }

    public short getTag() {
      return this.tag;
    }

    public update_args setTag(short tag) {
      this.tag = tag;
      setTagIsSet(true);
      return this;
    }

    public void unsetTag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAG_ISSET_ID);
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
      return EncodingUtils.testBit(__isset_bitfield, __TAG_ISSET_ID);
    }

    public void setTagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAG_ISSET_ID, value);
    }

    public int getOwn() {
      return this.own;
    }

    public update_args setOwn(int own) {
      this.own = own;
      setOwnIsSet(true);
      return this;
    }

    public void unsetOwn() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWN_ISSET_ID);
    }

    /** Returns true if field own is set (has been assigned a value) and false otherwise */
    public boolean isSetOwn() {
      return EncodingUtils.testBit(__isset_bitfield, __OWN_ISSET_ID);
    }

    public void setOwnIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWN_ISSET_ID, value);
    }

    public short getConcernpoint() {
      return this.concernpoint;
    }

    public update_args setConcernpoint(short concernpoint) {
      this.concernpoint = concernpoint;
      setConcernpointIsSet(true);
      return this;
    }

    public void unsetConcernpoint() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONCERNPOINT_ISSET_ID);
    }

    /** Returns true if field concernpoint is set (has been assigned a value) and false otherwise */
    public boolean isSetConcernpoint() {
      return EncodingUtils.testBit(__isset_bitfield, __CONCERNPOINT_ISSET_ID);
    }

    public void setConcernpointIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONCERNPOINT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT:
        if (value == null) {
          unsetObject();
        } else {
          setObject((String)value);
        }
        break;

      case SERVICES:
        if (value == null) {
          unsetServices();
        } else {
          setServices((String)value);
        }
        break;

      case POINT:
        if (value == null) {
          unsetPoint();
        } else {
          setPoint((Short)value);
        }
        break;

      case PERNEGATIVE:
        if (value == null) {
          unsetPernegative();
        } else {
          setPernegative((Short)value);
        }
        break;

      case PERPOSITIVE:
        if (value == null) {
          unsetPerpositive();
        } else {
          setPerpositive((Short)value);
        }
        break;

      case PERNEUTRAL:
        if (value == null) {
          unsetPerneutral();
        } else {
          setPerneutral((Short)value);
        }
        break;

      case IDSTR:
        if (value == null) {
          unsetIdstr();
        } else {
          setIdstr((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Short)value);
        }
        break;

      case MENTIONTYPE:
        if (value == null) {
          unsetMentiontype();
        } else {
          setMentiontype((Short)value);
        }
        break;

      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((Short)value);
        }
        break;

      case OWN:
        if (value == null) {
          unsetOwn();
        } else {
          setOwn((Integer)value);
        }
        break;

      case CONCERNPOINT:
        if (value == null) {
          unsetConcernpoint();
        } else {
          setConcernpoint((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT:
        return getObject();

      case SERVICES:
        return getServices();

      case POINT:
        return Short.valueOf(getPoint());

      case PERNEGATIVE:
        return Short.valueOf(getPernegative());

      case PERPOSITIVE:
        return Short.valueOf(getPerpositive());

      case PERNEUTRAL:
        return Short.valueOf(getPerneutral());

      case IDSTR:
        return getIdstr();

      case TYPE:
        return Short.valueOf(getType());

      case MENTIONTYPE:
        return Short.valueOf(getMentiontype());

      case TAG:
        return Short.valueOf(getTag());

      case OWN:
        return Integer.valueOf(getOwn());

      case CONCERNPOINT:
        return Short.valueOf(getConcernpoint());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT:
        return isSetObject();
      case SERVICES:
        return isSetServices();
      case POINT:
        return isSetPoint();
      case PERNEGATIVE:
        return isSetPernegative();
      case PERPOSITIVE:
        return isSetPerpositive();
      case PERNEUTRAL:
        return isSetPerneutral();
      case IDSTR:
        return isSetIdstr();
      case TYPE:
        return isSetType();
      case MENTIONTYPE:
        return isSetMentiontype();
      case TAG:
        return isSetTag();
      case OWN:
        return isSetOwn();
      case CONCERNPOINT:
        return isSetConcernpoint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_object = true && this.isSetObject();
      boolean that_present_object = true && that.isSetObject();
      if (this_present_object || that_present_object) {
        if (!(this_present_object && that_present_object))
          return false;
        if (!this.object.equals(that.object))
          return false;
      }

      boolean this_present_services = true && this.isSetServices();
      boolean that_present_services = true && that.isSetServices();
      if (this_present_services || that_present_services) {
        if (!(this_present_services && that_present_services))
          return false;
        if (!this.services.equals(that.services))
          return false;
      }

      boolean this_present_point = true;
      boolean that_present_point = true;
      if (this_present_point || that_present_point) {
        if (!(this_present_point && that_present_point))
          return false;
        if (this.point != that.point)
          return false;
      }

      boolean this_present_pernegative = true;
      boolean that_present_pernegative = true;
      if (this_present_pernegative || that_present_pernegative) {
        if (!(this_present_pernegative && that_present_pernegative))
          return false;
        if (this.pernegative != that.pernegative)
          return false;
      }

      boolean this_present_perpositive = true;
      boolean that_present_perpositive = true;
      if (this_present_perpositive || that_present_perpositive) {
        if (!(this_present_perpositive && that_present_perpositive))
          return false;
        if (this.perpositive != that.perpositive)
          return false;
      }

      boolean this_present_perneutral = true;
      boolean that_present_perneutral = true;
      if (this_present_perneutral || that_present_perneutral) {
        if (!(this_present_perneutral && that_present_perneutral))
          return false;
        if (this.perneutral != that.perneutral)
          return false;
      }

      boolean this_present_idstr = true && this.isSetIdstr();
      boolean that_present_idstr = true && that.isSetIdstr();
      if (this_present_idstr || that_present_idstr) {
        if (!(this_present_idstr && that_present_idstr))
          return false;
        if (!this.idstr.equals(that.idstr))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_mentiontype = true;
      boolean that_present_mentiontype = true;
      if (this_present_mentiontype || that_present_mentiontype) {
        if (!(this_present_mentiontype && that_present_mentiontype))
          return false;
        if (this.mentiontype != that.mentiontype)
          return false;
      }

      boolean this_present_tag = true;
      boolean that_present_tag = true;
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (this.tag != that.tag)
          return false;
      }

      boolean this_present_own = true;
      boolean that_present_own = true;
      if (this_present_own || that_present_own) {
        if (!(this_present_own && that_present_own))
          return false;
        if (this.own != that.own)
          return false;
      }

      boolean this_present_concernpoint = true;
      boolean that_present_concernpoint = true;
      if (this_present_concernpoint || that_present_concernpoint) {
        if (!(this_present_concernpoint && that_present_concernpoint))
          return false;
        if (this.concernpoint != that.concernpoint)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_object = true && (isSetObject());
      list.add(present_object);
      if (present_object)
        list.add(object);

      boolean present_services = true && (isSetServices());
      list.add(present_services);
      if (present_services)
        list.add(services);

      boolean present_point = true;
      list.add(present_point);
      if (present_point)
        list.add(point);

      boolean present_pernegative = true;
      list.add(present_pernegative);
      if (present_pernegative)
        list.add(pernegative);

      boolean present_perpositive = true;
      list.add(present_perpositive);
      if (present_perpositive)
        list.add(perpositive);

      boolean present_perneutral = true;
      list.add(present_perneutral);
      if (present_perneutral)
        list.add(perneutral);

      boolean present_idstr = true && (isSetIdstr());
      list.add(present_idstr);
      if (present_idstr)
        list.add(idstr);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_mentiontype = true;
      list.add(present_mentiontype);
      if (present_mentiontype)
        list.add(mentiontype);

      boolean present_tag = true;
      list.add(present_tag);
      if (present_tag)
        list.add(tag);

      boolean present_own = true;
      list.add(present_own);
      if (present_own)
        list.add(own);

      boolean present_concernpoint = true;
      list.add(present_concernpoint);
      if (present_concernpoint)
        list.add(concernpoint);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObject()).compareTo(other.isSetObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServices()).compareTo(other.isSetServices());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServices()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.services, other.services);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPernegative()).compareTo(other.isSetPernegative());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPernegative()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pernegative, other.pernegative);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerpositive()).compareTo(other.isSetPerpositive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerpositive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perpositive, other.perpositive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerneutral()).compareTo(other.isSetPerneutral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerneutral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perneutral, other.perneutral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdstr()).compareTo(other.isSetIdstr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdstr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idstr, other.idstr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMentiontype()).compareTo(other.isSetMentiontype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMentiontype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentiontype, other.mentiontype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOwn()).compareTo(other.isSetOwn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.own, other.own);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConcernpoint()).compareTo(other.isSetConcernpoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConcernpoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concernpoint, other.concernpoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("object:");
      if (this.object == null) {
        sb.append("null");
      } else {
        sb.append(this.object);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("services:");
      if (this.services == null) {
        sb.append("null");
      } else {
        sb.append(this.services);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pernegative:");
      sb.append(this.pernegative);
      first = false;
      if (!first) sb.append(", ");
      sb.append("perpositive:");
      sb.append(this.perpositive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("perneutral:");
      sb.append(this.perneutral);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idstr:");
      if (this.idstr == null) {
        sb.append("null");
      } else {
        sb.append(this.idstr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mentiontype:");
      sb.append(this.mentiontype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      sb.append(this.tag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("own:");
      sb.append(this.own);
      first = false;
      if (!first) sb.append(", ");
      sb.append("concernpoint:");
      sb.append(this.concernpoint);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.object = iprot.readString();
                struct.setObjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.services = iprot.readString();
                struct.setServicesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.point = iprot.readI16();
                struct.setPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PERNEGATIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.pernegative = iprot.readI16();
                struct.setPernegativeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PERPOSITIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perpositive = iprot.readI16();
                struct.setPerpositiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PERNEUTRAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perneutral = iprot.readI16();
                struct.setPerneutralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IDSTR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idstr = iprot.readString();
                struct.setIdstrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.type = iprot.readI16();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // MENTIONTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.mentiontype = iprot.readI16();
                struct.setMentiontypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.tag = iprot.readI16();
                struct.setTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // OWN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.own = iprot.readI32();
                struct.setOwnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // CONCERNPOINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.concernpoint = iprot.readI16();
                struct.setConcernpointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.object != null) {
          oprot.writeFieldBegin(OBJECT_FIELD_DESC);
          oprot.writeString(struct.object);
          oprot.writeFieldEnd();
        }
        if (struct.services != null) {
          oprot.writeFieldBegin(SERVICES_FIELD_DESC);
          oprot.writeString(struct.services);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI16(struct.point);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PERNEGATIVE_FIELD_DESC);
        oprot.writeI16(struct.pernegative);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PERPOSITIVE_FIELD_DESC);
        oprot.writeI16(struct.perpositive);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PERNEUTRAL_FIELD_DESC);
        oprot.writeI16(struct.perneutral);
        oprot.writeFieldEnd();
        if (struct.idstr != null) {
          oprot.writeFieldBegin(IDSTR_FIELD_DESC);
          oprot.writeString(struct.idstr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI16(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MENTIONTYPE_FIELD_DESC);
        oprot.writeI16(struct.mentiontype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeI16(struct.tag);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OWN_FIELD_DESC);
        oprot.writeI32(struct.own);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONCERNPOINT_FIELD_DESC);
        oprot.writeI16(struct.concernpoint);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_argsTupleSchemeFactory implements SchemeFactory {
      public update_argsTupleScheme getScheme() {
        return new update_argsTupleScheme();
      }
    }

    private static class update_argsTupleScheme extends TupleScheme<update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObject()) {
          optionals.set(0);
        }
        if (struct.isSetServices()) {
          optionals.set(1);
        }
        if (struct.isSetPoint()) {
          optionals.set(2);
        }
        if (struct.isSetPernegative()) {
          optionals.set(3);
        }
        if (struct.isSetPerpositive()) {
          optionals.set(4);
        }
        if (struct.isSetPerneutral()) {
          optionals.set(5);
        }
        if (struct.isSetIdstr()) {
          optionals.set(6);
        }
        if (struct.isSetType()) {
          optionals.set(7);
        }
        if (struct.isSetMentiontype()) {
          optionals.set(8);
        }
        if (struct.isSetTag()) {
          optionals.set(9);
        }
        if (struct.isSetOwn()) {
          optionals.set(10);
        }
        if (struct.isSetConcernpoint()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetObject()) {
          oprot.writeString(struct.object);
        }
        if (struct.isSetServices()) {
          oprot.writeString(struct.services);
        }
        if (struct.isSetPoint()) {
          oprot.writeI16(struct.point);
        }
        if (struct.isSetPernegative()) {
          oprot.writeI16(struct.pernegative);
        }
        if (struct.isSetPerpositive()) {
          oprot.writeI16(struct.perpositive);
        }
        if (struct.isSetPerneutral()) {
          oprot.writeI16(struct.perneutral);
        }
        if (struct.isSetIdstr()) {
          oprot.writeString(struct.idstr);
        }
        if (struct.isSetType()) {
          oprot.writeI16(struct.type);
        }
        if (struct.isSetMentiontype()) {
          oprot.writeI16(struct.mentiontype);
        }
        if (struct.isSetTag()) {
          oprot.writeI16(struct.tag);
        }
        if (struct.isSetOwn()) {
          oprot.writeI32(struct.own);
        }
        if (struct.isSetConcernpoint()) {
          oprot.writeI16(struct.concernpoint);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.object = iprot.readString();
          struct.setObjectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.services = iprot.readString();
          struct.setServicesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.point = iprot.readI16();
          struct.setPointIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pernegative = iprot.readI16();
          struct.setPernegativeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.perpositive = iprot.readI16();
          struct.setPerpositiveIsSet(true);
        }
        if (incoming.get(5)) {
          struct.perneutral = iprot.readI16();
          struct.setPerneutralIsSet(true);
        }
        if (incoming.get(6)) {
          struct.idstr = iprot.readString();
          struct.setIdstrIsSet(true);
        }
        if (incoming.get(7)) {
          struct.type = iprot.readI16();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(8)) {
          struct.mentiontype = iprot.readI16();
          struct.setMentiontypeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.tag = iprot.readI16();
          struct.setTagIsSet(true);
        }
        if (incoming.get(10)) {
          struct.own = iprot.readI32();
          struct.setOwnIsSet(true);
        }
        if (incoming.get(11)) {
          struct.concernpoint = iprot.readI16();
          struct.setConcernpointIsSet(true);
        }
      }
    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public update_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_resultTupleSchemeFactory implements SchemeFactory {
      public update_resultTupleScheme getScheme() {
        return new update_resultTupleScheme();
      }
    }

    private static class update_resultTupleScheme extends TupleScheme<update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPosts_args implements org.apache.thrift.TBase<getPosts_args, getPosts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPosts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPosts_args");

    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPosts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPosts_argsTupleSchemeFactory());
    }

    public int limit; // required
    public String query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIMIT((short)1, "limit"),
      QUERY((short)2, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIMIT
            return LIMIT;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPosts_args.class, metaDataMap);
    }

    public getPosts_args() {
    }

    public getPosts_args(
      int limit,
      String query)
    {
      this();
      this.limit = limit;
      setLimitIsSet(true);
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPosts_args(getPosts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.limit = other.limit;
      if (other.isSetQuery()) {
        this.query = other.query;
      }
    }

    public getPosts_args deepCopy() {
      return new getPosts_args(this);
    }

    @Override
    public void clear() {
      setLimitIsSet(false);
      this.limit = 0;
      this.query = null;
    }

    public int getLimit() {
      return this.limit;
    }

    public getPosts_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public String getQuery() {
      return this.query;
    }

    public getPosts_args setQuery(String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIMIT:
        return Integer.valueOf(getLimit());

      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIMIT:
        return isSetLimit();
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPosts_args)
        return this.equals((getPosts_args)that);
      return false;
    }

    public boolean equals(getPosts_args that) {
      if (that == null)
        return false;

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPosts_args(");
      boolean first = true;

      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPosts_argsStandardSchemeFactory implements SchemeFactory {
      public getPosts_argsStandardScheme getScheme() {
        return new getPosts_argsStandardScheme();
      }
    }

    private static class getPosts_argsStandardScheme extends StandardScheme<getPosts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPosts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPosts_argsTupleSchemeFactory implements SchemeFactory {
      public getPosts_argsTupleScheme getScheme() {
        return new getPosts_argsTupleScheme();
      }
    }

    private static class getPosts_argsTupleScheme extends TupleScheme<getPosts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLimit()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class getPosts_result implements org.apache.thrift.TBase<getPosts_result, getPosts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPosts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPosts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPosts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPosts_resultTupleSchemeFactory());
    }

    public List<MessageInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPosts_result.class, metaDataMap);
    }

    public getPosts_result() {
    }

    public getPosts_result(
      List<MessageInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPosts_result(getPosts_result other) {
      if (other.isSetSuccess()) {
        List<MessageInfo> __this__success = new ArrayList<MessageInfo>(other.success.size());
        for (MessageInfo other_element : other.success) {
          __this__success.add(new MessageInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPosts_result deepCopy() {
      return new getPosts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MessageInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MessageInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<MessageInfo>();
      }
      this.success.add(elem);
    }

    public List<MessageInfo> getSuccess() {
      return this.success;
    }

    public getPosts_result setSuccess(List<MessageInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MessageInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPosts_result)
        return this.equals((getPosts_result)that);
      return false;
    }

    public boolean equals(getPosts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPosts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPosts_resultStandardSchemeFactory implements SchemeFactory {
      public getPosts_resultStandardScheme getScheme() {
        return new getPosts_resultStandardScheme();
      }
    }

    private static class getPosts_resultStandardScheme extends StandardScheme<getPosts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<MessageInfo>(_list0.size);
                  MessageInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new MessageInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPosts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MessageInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPosts_resultTupleSchemeFactory implements SchemeFactory {
      public getPosts_resultTupleScheme getScheme() {
        return new getPosts_resultTupleScheme();
      }
    }

    private static class getPosts_resultTupleScheme extends TupleScheme<getPosts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MessageInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MessageInfo>(_list5.size);
            MessageInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new MessageInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateEs_args implements org.apache.thrift.TBase<updateEs_args, updateEs_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEs_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("column", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEs_argsTupleSchemeFactory());
    }

    public String id; // required
    public String column; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      COLUMN((short)2, "column");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // COLUMN
            return COLUMN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN, new org.apache.thrift.meta_data.FieldMetaData("column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEs_args.class, metaDataMap);
    }

    public updateEs_args() {
    }

    public updateEs_args(
      String id,
      String column)
    {
      this();
      this.id = id;
      this.column = column;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEs_args(updateEs_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetColumn()) {
        this.column = other.column;
      }
    }

    public updateEs_args deepCopy() {
      return new updateEs_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.column = null;
    }

    public String getId() {
      return this.id;
    }

    public updateEs_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getColumn() {
      return this.column;
    }

    public updateEs_args setColumn(String column) {
      this.column = column;
      return this;
    }

    public void unsetColumn() {
      this.column = null;
    }

    /** Returns true if field column is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn() {
      return this.column != null;
    }

    public void setColumnIsSet(boolean value) {
      if (!value) {
        this.column = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case COLUMN:
        if (value == null) {
          unsetColumn();
        } else {
          setColumn((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case COLUMN:
        return getColumn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case COLUMN:
        return isSetColumn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEs_args)
        return this.equals((updateEs_args)that);
      return false;
    }

    public boolean equals(updateEs_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_column = true && this.isSetColumn();
      boolean that_present_column = true && that.isSetColumn();
      if (this_present_column || that_present_column) {
        if (!(this_present_column && that_present_column))
          return false;
        if (!this.column.equals(that.column))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_column = true && (isSetColumn());
      list.add(present_column);
      if (present_column)
        list.add(column);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(other.isSetColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, other.column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEs_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column:");
      if (this.column == null) {
        sb.append("null");
      } else {
        sb.append(this.column);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEs_argsStandardSchemeFactory implements SchemeFactory {
      public updateEs_argsStandardScheme getScheme() {
        return new updateEs_argsStandardScheme();
      }
    }

    private static class updateEs_argsStandardScheme extends StandardScheme<updateEs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.column = iprot.readString();
                struct.setColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.column != null) {
          oprot.writeFieldBegin(COLUMN_FIELD_DESC);
          oprot.writeString(struct.column);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEs_argsTupleSchemeFactory implements SchemeFactory {
      public updateEs_argsTupleScheme getScheme() {
        return new updateEs_argsTupleScheme();
      }
    }

    private static class updateEs_argsTupleScheme extends TupleScheme<updateEs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetColumn()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetColumn()) {
          oprot.writeString(struct.column);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.column = iprot.readString();
          struct.setColumnIsSet(true);
        }
      }
    }

  }

  public static class updateEs_result implements org.apache.thrift.TBase<updateEs_result, updateEs_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEs_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEs_result.class, metaDataMap);
    }

    public updateEs_result() {
    }

    public updateEs_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEs_result(updateEs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateEs_result deepCopy() {
      return new updateEs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateEs_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEs_result)
        return this.equals((updateEs_result)that);
      return false;
    }

    public boolean equals(updateEs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEs_resultStandardSchemeFactory implements SchemeFactory {
      public updateEs_resultStandardScheme getScheme() {
        return new updateEs_resultStandardScheme();
      }
    }

    private static class updateEs_resultStandardScheme extends StandardScheme<updateEs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEs_resultTupleSchemeFactory implements SchemeFactory {
      public updateEs_resultTupleScheme getScheme() {
        return new updateEs_resultTupleScheme();
      }
    }

    private static class updateEs_resultTupleScheme extends TupleScheme<updateEs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
